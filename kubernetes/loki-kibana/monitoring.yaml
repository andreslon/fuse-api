apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: Secret
metadata:
  name: azure-auth-secret
  namespace: monitoring
type: Opaque
stringData:
  client_id: "bf58c705-f68a-42d1-9368-110f6e7740e3"
  client_secret: "EGb8Q~.O9.2mCcXxoSpS5~-zRJKSR65LlqsGDaC7"
  tenant_id: "7828c3b1-02f3-4d77-842d-f97a7a2d438a"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: loki-data-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: monitoring
data:
  loki.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        kvstore:
          store: inmemory
    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    storage_config:
      boltdb_shipper:
        active_index_directory: /loki/boltdb-shipper-active
        cache_location: /loki/boltdb-shipper-cache
        cache_ttl: 24h
        shared_store: filesystem
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      securityContext:
        fsGroup: 10001
        runAsUser: 10001
        runAsGroup: 10001
      containers:
        - name: loki
          image: grafana/loki:2.9.1
          args:
            - -config.file=/etc/loki/loki.yaml
          ports:
            - containerPort: 3100
              name: http-loki
          volumeMounts:
            - name: loki-config
              mountPath: /etc/loki
            - name: loki-data
              mountPath: /loki
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 1Gi
      volumes:
        - name: loki-config
          configMap:
            name: loki-config
        - name: loki-data
          persistentVolumeClaim:
            claimName: loki-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: monitoring
spec:
  ports:
    - port: 3100
      targetPort: 3100
      name: http-loki
  selector:
    app: loki
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
        version: 1
        editable: true
        isDefault: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
data:
  grafana.ini: |
    [server]
    root_url = https://monitoring.neobit.com.co
    
    [auth.azuread]
    enabled = false
    name = Microsoft
    allow_sign_up = true
    client_id = ${AZURE_CLIENT_ID}
    client_secret = ${AZURE_CLIENT_SECRET}
    scopes = openid email profile
    auth_url = https://login.microsoftonline.com/${AZURE_TENANT_ID}/oauth2/v2.0/authorize
    token_url = https://login.microsoftonline.com/${AZURE_TENANT_ID}/oauth2/v2.0/token
    allowed_domains =
    allowed_groups =
    auth_url_params = {"redirect_uri": "https://monitoring.neobit.com.co/login/azuread"}
    
    [auth]
    disable_login_form = true
    disable_signout_menu = true
    oauth_auto_login = false
    signout_redirect_url =
    
    [auth.anonymous]
    enabled = true
    org_name = Main Org.
    org_role = Admin
    
    [users]
    allow_sign_up = false
    auto_assign_org = true
    auto_assign_org_role = Admin
    
    [roles]
    default_admin_role = Admin
    
    [public_dashboards]
    enabled = true
    
    [security]
    allow_embedding = true
    admin_user = admin
    disable_initial_admin_creation = true
    
    [feature_toggles]
    publicDashboards = true
    
    [dashboards]
    min_refresh_interval = 5s
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
  access-control.yaml: |
    apiVersion: 1
    roles:
      - name: "basic_viewer"
        description: "Basic viewer role"
        version: 1
        permissions:
          - action: "dashboards:read"
            scope: "dashboards:*"
          - action: "dashboards.public:read"
            scope: "dashboards:*"
      - name: "editor_role"
        description: "Editor role"
        version: 1
        permissions:
          - action: "dashboards:create"
            scope: "dashboards:*"
          - action: "dashboards:write"
            scope: "dashboards:*"
          - action: "dashboards:delete"
            scope: "dashboards:*"
          - action: "dashboards.permissions:read"
            scope: "dashboards:*"
          - action: "dashboards.public:write"
            scope: "dashboards:*"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsGroup: 472
      containers:
        - name: grafana
          image: grafana/grafana:10.2.0
          ports:
            - containerPort: 3000
              name: http-grafana
          env:
            - name: GF_INSTALL_PLUGINS
              value: "grafana-clock-panel,grafana-simple-json-datasource"
            - name: AZURE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: azure-auth-secret
                  key: client_id
            - name: AZURE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: azure-auth-secret
                  key: client_secret
            - name: AZURE_TENANT_ID
              valueFrom:
                secretKeyRef:
                  name: azure-auth-secret
                  key: tenant_id
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "AdminSecurePassword123!"
            - name: GF_USERS_ALLOW_ORG_CREATE
              value: "true"
            - name: GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS
              value: "true"
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-provisioning
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-provisioning-access
              mountPath: /etc/grafana/provisioning/access-control
            - name: grafana-data
              mountPath: /var/lib/grafana
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1Gi
      volumes:
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-provisioning
          configMap:
            name: grafana-provisioning
            items:
              - key: dashboards.yaml
                path: dashboards.yaml
        - name: grafana-provisioning-access
          configMap:
            name: grafana-provisioning
            items:
              - key: access-control.yaml
                path: access-control.yaml
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  ports:
    - port: 3000
      targetPort: 3000
      name: http-grafana
  selector:
    app: grafana
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress
  namespace: monitoring
  annotations:
    external-dns.alpha.kubernetes.io/cloudflare-proxied: 'true'
    external-dns.alpha.kubernetes.io/hostname: monitoring.neobit.com.co
    external-dns.alpha.kubernetes.io/target: 4b7da1d9-dbb9-49c4-b145-4063a75747e3.cfargotunnel.com
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-busy-buffers-size: "256k"
spec:
  ingressClassName: nginx
  rules:
    - host: monitoring.neobit.com.co
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 3000
